model{
  # simple binomial model for repeated Lincoln-Petersen
  # abundance estimation - from Gazey and Staley 1986
  # and adding nesting success model to it with sharing N
  
  # Petersen data - multiple sampling within a season and 
  # the model is fit each year separately
  
  # n: Total number of painted turtles
  # mt: the number of painted turtles seen at time t
  # Ct: the total number of turtles seen at time t
  
  # we estimate p = n/N, which is the binomial p, then
  # compute N from n/phat
  
  # Tally - nesting success data
  # y: Tally counts
  # s: nesting success

  # this version considers R to be a random variable 

  # priors for Tally-nesting success
  alpha_s ~ dunif(0.1, 10)
  beta_s ~ dunif(0.1, 10)
  q ~ dbeta(1, 1)
  
  # priors for season specific parameters
  for (t in 1:T){
    N[t] ~ dunif(Nmin[t], 100000)
    #TCtau[t] ~ dgamma(0.1, 0.001)
    r[t] ~ dbeta(1, 1)
  }
  
  for (t in 1:T){
    # Petersen part
    for (i in 1:nt[t]){
      # capture probability
      p[t, i] <- n[t, i]/N[t]
      # likelihood:
      M[t, i] ~ dbin(p[t, i], C[t, i])
    }

    # Tally and nesting success part

    # nesting success modeled as a function of 
    # total abundance (OR Nmin...); none seemed to work
    # so, now have a hyperdistribution. 

    s[t] ~ dbeta(alpha_s, beta_s)

    # the number of turtles coming up in observed sections 
    # is Poisson with a proportion q and the abundance... 
    # does it really make sense?  this is per season - should this be
    # per night?

    TURT[t] ~ dpois(q * N[t])
      
    # nest counts are binomial here with nesting probability
    # s[t], which should affect how many are on the beach.
    # high nesting probability should decrease the number of 
    # females at the beach as they will not come back for R
    # days after successful nesting
    nest[t] ~ dbin(s[t], TURT[t])
    
    # probability of not nesting. The number of females on the 
    # beach is affected by this probability with sum of a[t]^r
    # where r = 0, 1, ..., maxR
    a[t] <- 1 - s[t]
    
    # create a vector of possible a[t]^r values with a max r value
    # also create a vector of unif probabilities for possible R 
    for (j in 1:maxR){
      aR[t,j] <- a[t]^j
      punif[t,j] <- 1/maxR
    }
    
    # create a vector of cumulaltive sum
    cs_aR[t,1] <- aR[t,1]
    for (j in 2:maxR){
      cs_aR[t,j] <- cs_aR[t,j-1] + aR[t,j]
    }
    
    # R is a discrete uniform 
    R[t] ~ dcat(punif[t,])
    
    s_dt[t] <- 1 + cs_aR[t, R[t]]

    # expected number of turtles on a beach on survey days  
    TCmu[t] <- (N[t]/R[t]) * s_dt[t]
        
    for (j in 1:yt[t]){
      
      # true number of females on a survey day
      TC_true[t, j] ~ dpois(TCmu[t])
      
      # then those get observed with observation r
      y[t, j] ~ dbin(r[t], TC_true[t, j])
      
    }
    #TCsd[t] <- sqrt(1/TCtau[t])
  }
  
}
